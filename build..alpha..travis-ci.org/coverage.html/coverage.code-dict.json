{"/home/travis/build/npmtest/node-npmtest-bem/test.js":"/* istanbul instrument in package npmtest_bem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bem/lib.npmtest_bem.js":"/* istanbul instrument in package npmtest_bem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bem = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bem = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bem/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bem && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bem */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bem\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bem.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bem.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bem.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bem.__dirname + '/lib.npmtest_bem.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem/bin/bem":"#!/usr/bin/env node\n\nrequire('bem-tools-core');\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem/node_modules/bem-tools-core/index.js":"var PLUGIN_PREFIX = 'bem-tools-';\n\nvar fs = require('fs'),\n    path = require('path'),\n    npmRootPath = require('global-modules'),\n    cwd = process.cwd();\n\nvar bem = require('coa').Cmd()\n    .name(process.argv[1])\n    .title(['BEM plugins CLI runned.', '' +\n        'See https://bem.info for more info.', ''].join('\\n'))\n    .helpful()\n    .opt()\n        .name('version').title('Version')\n        .short('v').long('version')\n        .flag()\n        .only()\n        .act(function() {\n            return require('./package').version;\n        })\n        .end();\n\nfunction readDir(dir) {\n    return new Promise(function(resolve, reject) {\n        fs.readdir(dir, function(err, packages) {\n            if (err && err.code !== 'ENOENT') return reject(err);\n\n            resolve((packages || []).reduce(function(acc, package) {\n                acc[package] = path.resolve(dir, package);\n                return acc;\n            }, {}));\n        });\n    });\n}\n\nPromise.all([\n    readDir(path.join(cwd, 'node_modules')),\n    readDir(path.join(cwd, 'node_modules', 'bem-tools', 'node_modules')),\n    readDir(path.join(__dirname, 'node_modules')),\n    readDir(path.join(__dirname, 'node_modules', 'bem-tools', 'node_modules')),\n    readDir(npmRootPath),\n    readDir(path.join(npmRootPath, 'bem-tools', 'node_modules'))\n]).then(function(packagesArray) {\n    var packagesHash = Object.assign.apply(Object, packagesArray.reverse());\n    var packages = Object.keys(packagesHash).filter(function(package) {\n        return package.indexOf(PLUGIN_PREFIX) === 0 && package !== 'bem-tools-core';\n    });\n\n    packages.forEach(function(packageName) {\n        var commandName = packageName.replace(PLUGIN_PREFIX, ''),\n            pluginPath = path.join(packagesHash[packageName], 'cli'),\n            pluginModule = null;\n        try {\n            pluginModule = require(pluginPath);\n        } catch(err) {\n            // TODO: implement verbose logging\n            // console.warn('Cannot find module', plugin);\n        }\n\n        pluginModule && bem.cmd().name(commandName).apply(pluginModule).end();\n    });\n\n    bem.run(process.argv.slice(2));\n\n}).catch(console.error);\n\nbem.act(function(opts, args) {\n    if (!Object.keys(opts).length && !Object.keys(args).length) {\n        return this.usage();\n    }\n});\n\nmodule.exports = bem;\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-tools-create/cli.js":"'use strict';\n\nvar create = require('./');\n\nmodule.exports = function() {\n    this\n        .title('Create BEM entity').helpful()\n        .opt()\n            .name('level').short('l').long('level')\n            .title('level directory path')\n            .end()\n        .opt()\n            .name('block').short('b').long('block')\n            .title('block name, required')\n            .arr()\n            .end()\n        .opt()\n            .name('elem').short('e').long('elem')\n            .title('element name')\n            .arr()\n            .end()\n        .opt()\n            .name('mod').short('m').long('mod')\n            .title('modifier name')\n            .arr()\n            .end()\n        .opt()\n            .name('val').short('v').long('val')\n            .title('modifier value')\n            .arr()\n            .end()\n        .opt()\n            .name('addTech').short('t').long('add-tech')\n            .title('add tech')\n            .arr()\n            .end()\n        .opt()\n            .name('forceTech').short('T').long('force-tech')\n            .title('use only specified tech')\n            .arr()\n            .end()\n        .opt()\n            .name('noTech').short('n').long('no-tech')\n            .title('exclude tech')\n            .arr()\n            .end()\n        .opt()\n            .name('content').short('c').long('content')\n            .title('the content of the file')\n            .arr()\n            .end()\n        .opt()\n            .name('contentFile').short('cf').long('content-file')\n            .title('path to the template to use as a content of created file')\n            .arr()\n            .end()\n        .opt()\n            .name('force').short('f').long('force')\n            .title('force files creation')\n            .flag()\n            .end()\n        .arg()\n            .name('entities').title('Entities')\n            .arr()\n            .end()\n        .act(function(opts, args) {\n            var options = {},\n                techs = opts.addTech || [];\n\n            if (opts.forceTech) {\n                options.onlyTech = opts.forceTech;\n            }\n\n            if (args.entities) {\n                return create(args.entities, opts.level, techs, options);\n            };\n\n            opts.block && create([{\n                block: opts.block[0],\n                elem: opts.elem && opts.elem[0],\n                modName: opts.mod && opts.mod[0],\n                modVal: opts.val && opts.val[0]\n            }], opts.level, techs, options);\n        })\n        .end();\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-tools-create/index.js":"module.exports = require('./lib/create');\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-tools-create/lib/create.js":"'use strict';\n\nvar path = require('path'),\n    bemConfig = require('bem-config'),\n    scheme = require('bem-fs-scheme'),\n    bemNaming = require('bem-naming'),\n    braceExpansion = require('brace-expansion'),\n    createEntity = require('./create-entity'),\n    getTemplate = require('./template'),\n    uniq = require('uniq'),\n    Promise = require('pinkie-promise');\n\nmodule.exports = function create(entities, levels, techs, options) {\n    options || (options = {});\n    techs || (techs = []);\n    var config = bemConfig(options),\n        cwd = process.cwd();\n\n    if (!levels || !levels.length) {\n        var levelsMap = config.levelMapSync(),\n            levelList = Object.keys(levelsMap);\n\n        var defaultLevels = levelList.filter(function(level) {\n            return levelsMap[level].default;\n        });\n\n        var levelByCwd = levelList.filter(function(level) {\n            return cwd.indexOf(level) === 0;\n        }).sort().reverse()[0];\n\n        levels = levelByCwd || (defaultLevels.length ? defaultLevels : cwd);\n    }\n\n    Array.isArray(entities) || (entities = [entities]);\n    Array.isArray(levels) || (levels = [levels]);\n\n    return Promise.all(entities.map(function(input) {\n        var isFileGlob = typeof input === 'string';\n\n        return Promise.all((isFileGlob ? braceExpansion(input) : [input]).map(function(filepathOrInput) {\n            var currentLevels = levels;\n\n            if (typeof filepathOrInput === 'string'){\n                var currentLevel = path.dirname(filepathOrInput);\n                currentLevel !== '.' && (currentLevels = [currentLevel]);\n            }\n\n            return Promise.all(currentLevels.map(function(relLevel) {\n                var level = path.resolve(config.rootSync() || cwd, relLevel);\n\n                return config.module('bem-tools')\n                    .then(function(bemToolsConf) {\n                        var pluginConf = bemToolsConf && bemToolsConf.plugins && bemToolsConf.plugins.create || {};\n\n                        return config.level(level).then(function(levelOptions) {\n                            levelOptions || (levelOptions = {});\n\n                            var namingOpts = levelOptions.naming,\n                                levelScheme = levelOptions.scheme,\n                                buildPath = scheme(levelScheme).path,\n                                entity = filepathOrInput,\n\n                                pluginConfLevels = pluginConf.levels || {},\n                                pluginConfLevel = pluginConfLevels[level] || {},\n                                pluginConfLevelTechs = pluginConfLevel.techs,\n\n                                pluginTechs = pluginConf.techs || [],\n                                currentTechs = uniq([].concat(pluginConfLevelTechs || pluginTechs, techs)),\n                                templatesOpts = Object.assign({}, pluginConf, pluginConfLevel);\n\n                            if (isFileGlob) {\n                                var file = path.basename(filepathOrInput),\n                                    splitted = file.split('.');\n\n                                entity = bemNaming(namingOpts).parse(splitted.shift());\n                                if (splitted.join('.')) {\n                                    currentTechs = uniq(techs.concat(splitted.join('.')));\n                                }\n                            }\n\n                            options.onlyTech && (currentTechs = options.onlyTech);\n\n                            return Promise.all(currentTechs.map(function(tech) {\n                                var pathToFile = buildPath(entity, tech, { naming: namingOpts }),\n                                    absPathToFile = path.join(path.resolve(level), pathToFile),\n                                    template = getTemplate(tech, templatesOpts);\n\n                                return createEntity(entity, absPathToFile, template, { naming: namingOpts });\n                            }));\n                        });\n                    });\n            }));\n\n        }));\n    })).then(function() {});\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-config/index.js":"'use strict';\n\nvar path = require('path'),\n    rc = require('betterc'),\n    _ = require('lodash'),\n    Promise = require('pinkie-promise'),\n    merge = require('./lib/merge');\n\n/**\n * Constructor\n * @param {Object} [options] object\n * @param {String} [options.name='bem'] - config filename.\n * @param {String} [options.cwd=process.cwd()] project root directory.\n * @param {Object} [options.defaults={}] use this object as fallback for found configs\n * @param {String} [options.pathToConfig] custom path to config on FS via command line argument `--config`\n * @constructor\n */\nfunction BemConfig(options) {\n    this._options = options || {};\n    // TODO: use cwd for resolver\n    this._options.cwd || (this._options.cwd = process.cwd());\n    // TODO: use cache\n    // this._cache = {};\n}\n\n/**\n * Returns all found configs\n * @param {Boolean} isSync - flag to resolve configs synchronously\n * @returns {Promise|Array}\n */\nBemConfig.prototype.configs = function(isSync) {\n    var options = this._options,\n        cwd = options.cwd,\n        rcOpts = {\n            defaults: options.defaults && JSON.parse(JSON.stringify(options.defaults)),\n            cwd: cwd,\n            fsRoot: options.fsRoot,\n            fsHome: options.fsHome,\n            name: options.name || 'bem',\n            extendBy: options.extendBy\n        };\n\n    if (options.pathToConfig) {\n        rcOpts.argv = { config: options.pathToConfig };\n    }\n\n    var plugins = [require('./plugins/resolve-level')].concat(options.plugins || []);\n\n    if (isSync) {\n\n        var configs = this._configs || (this._configs = rc.sync(rcOpts));\n\n        this._root = getConfigsRootDir(configs);\n\n        return plugins.reduce(function(configs, plugin) {\n            return configs.map(function(config) {\n                return plugin(config, configs, options);\n            });\n        }, configs);\n    }\n\n    var _this = this;\n\n    return (this._configs ? Promise.resolve(this._configs) : rc(rcOpts)).then(function(cfgs) {\n        _this._configs || (_this._configs = cfgs);\n\n        _this._root = getConfigsRootDir(cfgs);\n\n        return plugins.reduce(\n            function(cfgsPromise, plugin) {\n                return cfgsPromise.then(function(configs) {\n                    return Promise.all(configs.map(function(config) {\n                        return new Promise(function(resolve) {\n                            plugin(config, configs, options, resolve);\n                        });\n                    }));\n                });\n            },\n            Promise.resolve(cfgs));\n    });\n};\n\n/**\n * Returns project root\n * @returns {Promise}\n */\nBemConfig.prototype.root = function() {\n    if (this._root) {\n        return Promise.resolve(this._root);\n    }\n\n    var _this = this;\n    return this.configs().then(function() {\n        return _this._root;\n    });\n};\n\n/**\n * Returns merged config\n * @returns {Promise}\n */\nBemConfig.prototype.get = function() {\n    return this.configs().then(function(configs) {\n        return merge(configs);\n    });\n};\n\n/**\n * Resolves config for given level\n * @param {String} pathToLevel - level path\n * @returns {Promise}\n */\nBemConfig.prototype.level = function(pathToLevel) {\n    var _this = this;\n\n    return this.configs()\n        .then(function(configs) {\n            return getLevelByConfigs(\n                pathToLevel,\n                _this._options,\n                configs,\n                _this._root);\n        });\n};\n\n/**\n * Returns config for given library\n * @param {String} libName - library name\n * @returns {Promise}\n */\nBemConfig.prototype.library = function(libName) {\n    return this.get().then(function(config) {\n        var libs = config.libs;\n\n        if (!libs) { return; }\n\n        var lib = libs[libName];\n\n        if (!lib) { return; }\n\n        return new BemConfig({ projectRoot: lib.path });\n    });\n};\n\n/**\n * Returns map of settings for each of level\n * @returns {Promise}\n */\nBemConfig.prototype.levelMap = function() {\n    var _this = this;\n\n    return this.get().then(function(config) {\n        var projectLevels = config.levels,\n            libNames = config.libs ? Object.keys(config.libs) : [];\n\n        return Promise.all(libNames.map(function(libName) {\n            return _this.library(libName).then(function(bemLibConf) {\n                return bemLibConf.get().then(function(libConfig) {\n                    return libConfig.levels;\n                })\n            });\n        })).then(function(libLevels) {\n            var allLevels = libLevels.concat(projectLevels);\n\n            return allLevels.reduce(merge, {});\n        });\n    });\n};\n\n/**\n * Returns config for given module name\n * @param {String} moduleName - name of module\n * @returns {Promise}\n */\nBemConfig.prototype.module = function(moduleName) {\n    return this.get().then(function(config) {\n        var modules = config.modules;\n\n        return modules && modules[moduleName];\n    });\n};\n\n/**\n * Returns project root\n * @returns {String}\n */\nBemConfig.prototype.rootSync = function() {\n    if (this._root) {\n        return this._root;\n    }\n\n    this.configs(true);\n    return this._root;\n};\n\n/**\n * Returns merged config synchronously\n * @returns {Object}\n */\nBemConfig.prototype.getSync = function() {\n    return merge(this.configs(true));\n}\n\n/**\n * Resolves config for given level synchronously\n * @param {String} pathToLevel - level path\n * @returns {Object}\n */\nBemConfig.prototype.levelSync = function(pathToLevel) {\n    // TODO: cache\n    return getLevelByConfigs(\n        pathToLevel,\n        this._options,\n        this.configs(true),\n        this._root);\n};\n\n/**\n * Returns config for given library synchronously\n * @param {String} libName - library name\n * @returns {Object}\n */\nBemConfig.prototype.librarySync = function(libName) {\n    var config = this.getSync(),\n        libs = config.libs;\n\n    if (!libs) { return; }\n\n    var lib = libs[libName];\n\n    if (!lib) { return; }\n\n    return new BemConfig({ projectRoot: lib.path });\n}\n\n/**\n * Returns map of settings for each of level synchronously\n * @returns {Object}\n */\nBemConfig.prototype.levelMapSync = function() {\n    var config = this.getSync(),\n        projectLevels = config.levels,\n        libNames = config.libs ? Object.keys(config.libs) : [];\n\n    var libLevels = libNames.map(function(libName) {\n        var bemLibConf = this.librarySync(libName),\n            libConfig = bemLibConf.getSync();\n\n        return libConfig.levels;\n    }, this);\n\n    var allLevels = libLevels.concat(projectLevels);\n\n    return allLevels.reduce(function(acc, level) {\n        return merge(acc, level);\n    }, {});\n};\n\n/**\n * Returns config for given module name synchronously\n * @param {String} moduleName - name of module\n * @returns {Object}\n */\nBemConfig.prototype.moduleSync = function(moduleName) {\n    var modules = this.getSync().modules;\n\n    return modules && modules[moduleName];\n};\n\nfunction getConfigsRootDir(configs) {\n    var rootCfg = configs.find(function(cfg) { return cfg.root && cfg.__source; });\n    if (rootCfg) { return path.dirname(rootCfg.__source); }\n}\n\nfunction getLevelByConfigs(pathToLevel, options, allConfigs, root) {\n    var absLevelPath = path.resolve(root || options.cwd, pathToLevel),\n        levelOpts = {},\n        commonOpts = {};\n\n    for (var i = allConfigs.length - 1; i >= 0; i--) {\n        var conf = allConfigs[i],\n            levels = conf.levels || {};\n\n        commonOpts = merge({}, conf, commonOpts);\n\n        for (var level in levels) {\n            if (level !== absLevelPath) { continue; }\n\n            // works like deep extend but overrides arrays\n            levelOpts = merge({}, levels[level], levelOpts);\n        }\n\n        if (conf.root) { break; }\n    }\n\n    levelOpts = merge(commonOpts, levelOpts);\n\n    delete levelOpts.__source;\n    delete levelOpts.levels;\n    delete levelOpts.root;\n\n    if (!_.isEmpty(levelOpts)) {\n        return levelOpts;\n    }\n}\n\nmodule.exports = function(opts) {\n    return new BemConfig(opts);\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-config/lib/merge.js":"var _ = require('lodash');\n\n/**\n * Merge all arguments to firt one.\n * Consider arrays as simple value and not deep merge them.\n * @param {Array|Object} configs - array of configs or positional arguments\n * @return {Object}\n */\nmodule.exports = function merge(configs) {\n    var args = Array.isArray(configs) ? configs : Array.from(arguments);\n    args.push(function(objValue, srcValue) {\n        if (Array.isArray(objValue)) { return srcValue; }\n    });\n    return _.mergeWith.apply(_, args);\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-fs-scheme/index.js":"module.exports = function(name) {\n    try {\n        return require('./lib/schemes/' + (name || 'nested'));\n    } catch(e) {\n        throw new Error('Scheme not found');\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-naming/index.js":"'use strict';\n\n(function (global) {\n/**\n * Enum for types of BEM entities.\n *\n * @readonly\n * @enum {String}\n */\nvar TYPES = {\n    BLOCK:     'block',\n    BLOCK_MOD: 'blockMod',\n    ELEM:      'elem',\n    ELEM_MOD:  'elemMod'\n};\n\n/**\n * Defines which symbols can be used for block, element and modifier's names.\n * @readonly\n */\nvar WORD_PATTERN = '[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*';\n\n/**\n * Presets of options for various naming.\n * @readonly\n */\nvar presets = {\n    origin: {\n        delims: {\n            elem: '__',\n            mod: { name: '_', val: '_' }\n        },\n        wordPattern: WORD_PATTERN\n    },\n    'two-dashes': {\n        delims: {\n            elem: '__',\n            mod: { name: '--', val: '_' }\n        },\n        wordPattern: WORD_PATTERN\n    }\n};\n\n/**\n * It is necessary not to create new instances for the same custom naming.\n * @readonly\n */\nvar cache = {};\n\n/**\n * Creates namespace with methods which allows getting information about BEM entity using string as well\n * as forming string representation based on naming object.\n *\n * @param {Object} [options]              Options.\n * @param {String} [options.elem=__]      Separates element's name from block.\n * @param {String|Object} [options.mod=_] Separates modifiers from blocks and elements.\n * @param {String} [options.mod.name=_]   Separates name of modifier from blocks and elements.\n * @param {String} [options.mod.val=_]    Separates value of modifier from name of modifier.\n * @param {String} [options.wordPattern]  Defines which symbols can be used for block, element and modifier's names.\n * @return {Object}\n */\nfunction createNaming(options) {\n    var opts = init(options),\n        id = JSON.stringify(opts);\n\n    if (cache[id]) {\n        return cache[id];\n    }\n\n    var delims = opts.delims,\n        regex = buildRegex(delims, opts.wordPattern);\n\n    /**\n     * Checks a string to be valid BEM notation.\n     *\n     * @param {String} str - String representation of BEM entity.\n     * @returns {Boolean}\n     */\n    function validate(str) {\n        return regex.test(str);\n    }\n\n    /**\n     * Parses string into naming object.\n     *\n     * @param {String} str - string representation of BEM entity.\n     * @returns {Object|undefined}\n     */\n    function parse(str) {\n        var executed = regex.exec(str);\n\n        if (!executed) { return undefined; }\n\n        var notation = {\n                block: executed[1] || executed[4]\n            },\n            elem = executed[5],\n            modName = executed[2] || executed[6];\n\n        elem && (notation.elem = elem);\n\n        if (modName) {\n            var modVal = executed[3] || executed[7];\n\n            notation.modName = modName;\n            notation.modVal = modVal || true;\n        }\n\n        return notation;\n    }\n\n    /**\n     * Forms a string according to naming object.\n     *\n     * @param {Object} obj - naming object\n     * @returns {String}\n     */\n    function stringify(obj) {\n        if (!obj || !obj.block) {\n            return undefined;\n        }\n\n        var res = obj.block;\n\n        if (obj.elem) {\n            res += delims.elem + obj.elem;\n        }\n\n        if (obj.modName) {\n            var modVal = obj.modVal;\n\n            if (modVal || modVal === 0 || !obj.hasOwnProperty('modVal')) {\n                res += delims.mod.name + obj.modName;\n            }\n\n            if (modVal && modVal !== true) {\n                res += delims.mod.val + modVal;\n            }\n        }\n\n        return res;\n    }\n\n    /**\n     * Returns a string indicating type of a BEM entity.\n     *\n     * @param {Object|String|undefined} obj - naming object or string representation of BEM entity.\n     * @returns {String}\n     */\n    function typeOf(obj) {\n        if (typeof obj === 'string') {\n            obj = parse(obj);\n        }\n\n        if (!obj || !obj.block) { return undefined; }\n\n        var modName = obj.modName,\n            isMod = modName && (obj.modVal || !obj.hasOwnProperty('modVal'));\n\n        if (obj.elem) {\n            if (isMod)    { return TYPES.ELEM_MOD; }\n            if (!modName) { return TYPES.ELEM;     }\n        }\n\n        if (isMod)    { return TYPES.BLOCK_MOD; }\n        if (!modName) { return TYPES.BLOCK;     }\n    }\n\n    /**\n     * Checks whether naming object or string is a block.\n     *\n     * @param {Object|String} obj - naming object or string representation of BEM entity.\n     * @returns {Boolean}\n     */\n    function isBlock(obj) {\n        return typeOf(obj) === TYPES.BLOCK;\n    }\n\n    /**\n     * Checks whether naming object or string is modifier of a block.\n     *\n     * @param {Object|String} obj - naming object or string representation of BEM entity.\n     * @returns {Boolean}\n     */\n    function isBlockMod(obj) {\n        return typeOf(obj) === TYPES.BLOCK_MOD;\n    }\n\n    /**\n     * Checks whether naming object or string is element of a block.\n     *\n     * @param {Object|String} obj - naming object or string representation of BEM entity.\n     * @returns {Boolean}\n     */\n    function isElem(obj) {\n        return typeOf(obj) === TYPES.ELEM;\n    }\n\n    /**\n     * Checks whether naming object or string is element of a block.\n     *\n     * @param {Object|String} obj - naming object or string representation of BEM entity.\n     * @returns {Boolean}\n     */\n    function isElemMod(obj) {\n        return typeOf(obj) === TYPES.ELEM_MOD;\n    }\n\n    var namespace = {\n        validate: validate,\n        typeOf: typeOf,\n        isBlock: isBlock,\n        isBlockMod: isBlockMod,\n        isElem: isElem,\n        isElemMod: isElemMod,\n        parse: parse,\n        stringify: stringify,\n        /**\n         * String to separate elem from block.\n         *\n         * @type {String}\n         */\n        elemDelim: delims.elem,\n        /**\n         * String to separate modifiers from blocks and elements.\n         *\n         * @type {String}\n         */\n        modDelim: delims.mod.name,\n        /**\n         * String to separate value of modifier from name of modifier.\n         *\n         * @type {String}\n         */\n        modValDelim: delims.mod.val\n    };\n\n    cache[id] = namespace;\n\n    return namespace;\n}\n\n/**\n * Returns delims and wordPattern.\n *\n * @param {Object} options - user options\n * @returns {{delims: Object, wordPattern: String}}\n */\nfunction init(options) {\n    options || (options = {});\n\n    if (typeof options === 'string') {\n        var preset = presets[options];\n\n        if (!preset) {\n            throw new Error('The `' + options + '` naming is unknown.');\n        }\n\n        return preset;\n    }\n\n    var defaults = presets.origin,\n        defaultDelims = defaults.delims,\n        defaultModDelims = defaultDelims.mod,\n        mod = options.mod || defaultDelims.mod;\n\n    return {\n        delims: {\n            elem: options.elem || defaultDelims.elem,\n            mod: typeof mod === 'string'\n                ? { name: mod, val: mod }\n                : {\n                    name: mod.name || defaultModDelims.name,\n                    val: mod.val || mod.name || defaultModDelims.val\n                }\n        },\n        wordPattern: options.wordPattern || defaults.wordPattern\n    };\n}\n\n/**\n * Builds regex for specified naming.\n *\n * @param {Object} delims      Separates block names, elements and modifiers.\n * @param {String} wordPattern Defines which symbols can be used for block, element and modifier's names.\n * @returns {RegExp}\n */\nfunction buildRegex(delims, wordPattern) {\n    var block = '(' + wordPattern + ')',\n        elem = '(?:' + delims.elem + '(' + wordPattern + '))?',\n        modName = '(?:' + delims.mod.name + '(' + wordPattern + '))?',\n        modVal = '(?:' + delims.mod.val + '(' + wordPattern + '))?',\n        mod = modName + modVal;\n\n    return new RegExp('^' + block + mod + '$|^' + block + elem + mod + '$');\n}\n\nvar defineAsGlobal = true,\n    api = [\n        'validate', 'typeOf',\n        'isBlock', 'isBlockMod', 'isElem', 'isElemMod',\n        'parse', 'stringify',\n        'elemDelim', 'modDelim', 'modValDelim'\n    ],\n    originalNaming = createNaming();\n\napi.forEach(function (name) {\n    createNaming[name] = originalNaming[name];\n});\n\n// Node.js\n/* istanbul ignore if */\nif (typeof exports === 'object') {\n    module.exports = createNaming;\n    defineAsGlobal = false;\n}\n\n// YModules\n/* istanbul ignore if */\nif (typeof modules === 'object') {\n    modules.define('bem-naming', function (provide) {\n        provide(createNaming);\n    });\n    defineAsGlobal = false;\n}\n\n// AMD\n/* istanbul ignore if */\nif (typeof define === 'function') {\n    define(function (require, exports, module) {\n        module.exports = createNaming;\n    });\n    defineAsGlobal = false;\n}\n\n/* istanbul ignore next */\ndefineAsGlobal && (global.bemNaming = createNaming);\n})(typeof window !== 'undefined' ? window : global);\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-tools-create/lib/create-entity.js":"'use strict';\n\nvar fs = require('fs'),\n    path = require('path'),\n    bemNaming = require('bem-naming'),\n    Promise = require('pinkie-promise'),\n    mkdirp = require('mkdirp');\n\nmodule.exports = function(entity, fileName, template, options) {\n    return new Promise(function(resolve, reject) {\n        fs.exists(fileName, function(exists) {\n            if (exists) return resolve();\n\n            mkdirp(path.dirname(fileName), function(err) {\n                if (err) return reject(err);\n\n                fs.writeFile(fileName, template(entity, bemNaming(options.naming)), function(err) {\n                    err ? reject(err) : resolve();\n                });\n            });\n        });\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-bem/node_modules/bem-tools-create/lib/template.js":"'use strict';\n\nvar fs = require('fs'),\n    path = require('path');\n\nfunction defaultTemplate() {\n    return '';\n}\n\nmodule.exports = function getTemplate(tech, options) {\n    var templateFolder = options.templateFolder,\n        techId = (options.techsTemplates && options.techsTemplates[tech]) || tech,\n        templatePath = options.templates && options.templates[techId],\n        possiblePaths = [path.join(__dirname, 'templates')];\n\n    templateFolder && possiblePaths.unshift(templateFolder);\n\n    if (!templatePath) {\n        for (var i = 0; i < possiblePaths.length; i++) {\n            var possibleTemplatePath = path.join(possiblePaths[i], techId + '.js');\n\n            if (fs.existsSync(possibleTemplatePath)) {\n                templatePath = possibleTemplatePath;\n                break;\n            }\n        }\n    }\n\n    return templatePath ? require(templatePath) : defaultTemplate;\n};\n"}